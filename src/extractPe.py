import os as os
import sys
import os.path
from csv import writer
import math
import numpy as np
from joblib import Parallel, delayed
import multiprocessing

import pefile
import os as os
from pefile import PEFormatError 
from csv import writer
from collections import Counter
from mpi4py import MPI

PE_feature_list = ['number_of_sections','number_of_IAT_entires', \
                   'number_of_import_symbols', 'number_of_imports', 'number_of_rva_and_sizes', \
                   'sec_entropy_data','sec_entropy_rdata', 'sec_entropy_reloc', 'sec_entropy_text', 'sec_entropy_rsrc',\
                   'sec_rawsize_data','sec_rawsize_text','size_code', 'SizeOfHeaders', \
                   'imported_symbols', 'imported_dll_freq','section_names','sha256',\
                   'datadir_IMAGE_DIRECTORY_ENTRY_BASERELOC_size', 'datadir_IMAGE_DIRECTORY_ENTRY_RESOURCE_size', \
                   'datadir_IMAGE_DIRECTORY_ENTRY_IAT_size', 'datadir_IMAGE_DIRECTORY_ENTRY_IMPORT_size']

peFeatures1 = ['imported_dll_freq','number_of_rva_and_sizes','number_of_IAT_entires','size_code','SizeOfHeaders']
peFeatures2 = ['machine','number_of_sections','compile_date','pointer_to_symbol_table','number_of_symbols','size_of_optional_header','characteristics'
,'magic','major_linker_version','minor_linker_version','size_init_data','size_uninit_data','section_alignment','file_alignment'
,'major_operating_system_version','minor_operating_system_version','major_image_version','minor_image_version','major_subsystem_version'
,'minor_subsystem_version','size_of_headers','subsystem','dll_characteristics','loader_flags','number_of_imports','AddressOfEntryPoint'
,'SizeOfHeaders','CheckSum','size_of_stack_reserve','size_of_stack_commit','size_of_heap_reserve','size_of_heap_commit'
,'image_base','Size_image','BaseOfCode','number_of_rva_and_sizes','number_of_IAT_entires']

def convertToUTF8(s):
    if (isinstance(s, str)):
        return s.encode( "utf-8" )
    try:
        u = str( s, "utf-8" )
    except:
        return str(s)
    utf8 = u.encode( "utf-8" )
    return utf8

def open_using_pefile(input_name):
        ''' Open the PE File using the Python pefile module. '''
        try:
            pe = pefile.PE(input_name)
        except (PEFormatError,AttributeError) as e:
            return None
        # Success
        return pe

def extract_feature(pe):
    if pe is None:
        return None
    
    extracted_features = {}
    feature_not_found = 0
    feature_default_value = 0
    
    for features in PE_feature_list:
        extracted_features[features] = feature_not_found
    
    extracted_features['imported_dll_freq'] = len(Counter())
    extracted_features['number_of_rva_and_sizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    extracted_features['number_of_IAT_entires'] = (pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].Size)/4
    extracted_features['size_code'] = pe.OPTIONAL_HEADER.SizeOfCode
    extracted_features['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
    return extracted_features

def extract_feature_2(pe):
    if pe is None:
        return None
    extracted_features = {}

    feature_not_found = 0
    feature_default_value = 0
    
    for features in peFeatures2:
        extracted_features[features] = feature_not_found
    try:
        # File_Header Features
        extracted_features['machine'] = pe.FILE_HEADER.Machine
        #print("1")
        extracted_features['number_of_sections'] = pe.FILE_HEADER.NumberOfSections
        #print("2")
        extracted_features['compile_date'] = pe.FILE_HEADER.TimeDateStamp
        #print("3")
        extracted_features['pointer_to_symbol_table'] = pe.FILE_HEADER.PointerToSymbolTable
        #print("4")
        extracted_features['number_of_symbols'] = pe.FILE_HEADER.NumberOfSymbols
        #print("5")
        extracted_features['size_of_optional_header'] = pe.FILE_HEADER.SizeOfOptionalHeader
        #print("6")
        extracted_features['characteristics'] = pe.FILE_HEADER.Characteristics
        #print("7")
        # Optional Header Features
        extracted_features['magic'] = pe.OPTIONAL_HEADER.Magic
        #print("8")
        extracted_features['major_linker_version'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        #print("9")
        extracted_features['minor_linker_version'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        #print("10")
        extracted_features['size_init_data'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        #print("11")
        extracted_features['size_uninit_data'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        #print("12")
        extracted_features['section_alignment'] = pe.OPTIONAL_HEADER.SectionAlignment
        #print("13")
        extracted_features['file_alignment'] = pe.OPTIONAL_HEADER.FileAlignment
        #print("14")
        extracted_features['major_operating_system_version'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        #print("15")
        extracted_features['minor_operating_system_version'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        #print("16")
        extracted_features['major_image_version'] = pe.OPTIONAL_HEADER.MajorImageVersion
        #print("17")
        extracted_features['minor_image_version'] = pe.OPTIONAL_HEADER.MinorImageVersion
        #print("18")
        extracted_features['major_subsystem_version'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        #print("19")
        extracted_features['minor_subsystem_version'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        #print("20")
        extracted_features['size_of_headers'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        #print("21")
        extracted_features['subsystem'] = pe.OPTIONAL_HEADER.Subsystem
        #print("22")
        extracted_features['dll_characteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
        #print("23")
        extracted_features['loader_flags'] = pe.OPTIONAL_HEADER.LoaderFlags
        #print("24")
        extracted_features['number_of_imports'] = len(pe.DIRECTORY_ENTRY_IMPORT)
        #print("25")
        extracted_features['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        #print("26")
        extracted_features['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        #print("27")
        extracted_features['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        #print("28")
        extracted_features['size_of_stack_reserve'] = float(pe.OPTIONAL_HEADER.SizeOfStackReserve)
        #print("29")
        extracted_features['size_of_stack_commit'] = float(pe.OPTIONAL_HEADER.SizeOfStackCommit)
        #print("30")
        extracted_features['size_of_heap_reserve'] = float(pe.OPTIONAL_HEADER.SizeOfHeapReserve)
        #print("31")
        extracted_features['size_of_heap_commit'] = float(pe.OPTIONAL_HEADER.SizeOfHeapCommit)
        #print("32")
        extracted_features['image_base'] = float(pe.OPTIONAL_HEADER.ImageBase)
        #print("33")
        extracted_features['Size_image'] = pe.OPTIONAL_HEADER.SizeOfImage
        #print("34")
        extracted_features['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        #print("35")
        extracted_features['number_of_rva_and_sizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
        #print("36")
        extracted_features['number_of_IAT_entires'] = (pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].Size)/4
        #print("37")
    except AttributeError:
        print("Error")
        return None
    return extracted_features

def getFeatures(fil,malwareDirectory):
    fil = malwareDirectory + fil
    feature_counts = []
    print("File: ", fil)

    ret = open_using_pefile(fil)
    featuresExtracted1 = extract_feature(ret)
    featuresKeys1 = list(featuresExtracted1.keys())
    featuresValues1 = list(featuresExtracted1.values())
    print("FeaturesNames1: ", featuresKeys1, "len: ", len(featuresKeys1))
    print("FeatuesValues1: ", featuresValues1, "len: ", len(featuresValues1))

    ret2 = open_using_pefile(fil)
    featuresExtracted2 = extract_feature_2(ret2)
    featuresKeys2 = list(featuresExtracted2.keys())
    featuresValues2 = list(featuresExtracted2.values())
    print("FeaturesNames2: ", featuresKeys2, "len: ", len(featuresKeys2))
    print("FeatuesValues2: ", featuresValues2, "len: ", len(featuresValues2), "\n")

    count_vals = featuresValues1 + featuresValues2
    fileNameBase = os.path.basename(fil)
    feature_counts.append([fileNameBase] + count_vals)
    return feature_counts, featuresKeys1, featuresKeys2
    

def extractPeFeatures():

    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    nprocs = comm.Get_size()

    sumToRank = int(sys.argv[1])
    malwareDirectory = sys.argv[2]
    peOutput = sys.argv[3]

    rank+=sumToRank
    print("Rank: ", rank)
    # Get pe file
    listOfPeFiles = os.listdir(malwareDirectory)
    peFile = str(listOfPeFiles[rank])
    print("PeFile: ", peFile)
    # Extract features from pe file
    feature_counts,keys1,keys2 = getFeatures(peFile,malwareDirectory)
    # Write features to .csv file
    individualOutputCsv = peOutput+peFile+".csv"
    with open(individualOutputCsv, 'w') as f:
        fw = writer(f)
        fw.writerows(feature_counts)
        f.close()    

extractPeFeatures()
