from csv import writer
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from sklearn.feature_selection import SelectKBest, SelectPercentile, chi2
from sklearn.metrics import confusion_matrix, accuracy_score, precision_recall_fscore_support, mean_absolute_error, make_scorer
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn import metrics
import pandas as pd
import numpy as np
from sklearn.naive_bayes import BernoulliNB,MultinomialNB, GaussianNB
from sklearn.ensemble import RandomForestClassifier, VotingClassifier
from xgboost import XGBClassifier

def safe_div(x,y):
    if y == 0:
        return 0
    return x / y

def createNbClassifier():
    # clfNB = BernoulliNB(alpha=1.0e-10) # Binary features
    clfNB = GaussianNB(var_smoothing=1) # Continous features
    return clfNB

def xposterior(X, obj):
    return(obj.predict_proba(X))

def dataStandarization(X_data):
    scaler = StandardScaler(copy=True, with_mean=True, with_std=True)
    X_data.fillna(0,inplace=True)
    X_data = scaler.fit_transform(X_data)
    return X_data

def classifyCrossValidated(X_data,y_data,i):
    clfNB = createNbClassifier()
    scoresNB = cross_val_score(clfNB, X_data, y_data, cv=5)
    scoresNBmacro = cross_val_score(clfNB, X_data, y_data, cv=5, scoring='f1_macro')
    scoresNBweighted = cross_val_score(clfNB, X_data, y_data, cv=5, scoring='f1_weighted')
    # Write results into csv
    results = [i, scoresNB.mean(),scoresNBmacro.mean(),scoresNBweighted.mean(),scoresNB.std() * 2]
    print(results)

    return results

def classifyCombClassifiers(X_data,y_data,i):
    clfNB = createNbClassifier()    
    X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.20, random_state=42)
    # NB
    y_pred = clfNB.fit(X_train,y_train).predict(X_test)
    tp,fn,fp,tn = confusion_matrix(y_test, y_pred, labels=[0,1]).ravel()
    NBAccuracy = accuracy_score(y_test, y_pred)
    NBFpRate = safe_div( int(fp), int(tp)+int(fp) )
    NBFnRate = safe_div( int(fn), int(tn)+int(fn) )
    print("NB Accuracy:", NBAccuracy," FP:", NBFpRate, " FN:", NBFnRate)
    # Write results into csv
    results = [i, NBAccuracy,NBFpRate,NBFnRate,NBSenAccuracy,NBSenFpRate,NBSenFnRate]
    
    return results

def checkClassificationAlgorithms(trainDataReducedWithLabels,testDataReducedWithLabels, outputDirectory,i, csvFile):
    # Split data
    X_train = trainDataReducedWithLabels.iloc[:,1:-1] 
    y_train = trainDataReducedWithLabels.iloc[:,-1]
    X_test = testDataReducedWithLabels.iloc[:,1:-1] 
    y_test = testDataReducedWithLabels.iloc[:,-1]    
    # NB
    clfNB = trainNB(X_train, y_train)
    # Predict
    y_pred = clfNB.predict(X_test)
    # Check confusion matrix, accuracy and recall
    tp,fn,fp,tn = confusion_matrix(y_test, y_pred, labels=[0,1]).ravel()
    NBAccuracy = accuracy_score(y_test, y_pred)
    NBMae = mean_absolute_error(y_test, y_pred)
    NBRecall = safe_div( int(tp), int(tp)+int(fn) )
    NBFpRate = safe_div( int(fp), int(tp)+int(fp) )
    NBFnRate = safe_div( int(fn), int(tn)+int(fn) )
    print("NB Accuracy:", NBAccuracy," Recall:", NBRecall," FP:", NBFpRate, " FN:", NBFnRate," Mae:", NBMae)
    # Write results into csv
    results = [i, NBAccuracy, NBRecall, NBFpRate, NBFnRate, NBMae]
    with open(csvFile, 'a') as f:
        fw = writer(f)
        fw.writerow(results)
