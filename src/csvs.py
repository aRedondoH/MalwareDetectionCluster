from csv import writer
import os as os
import sys
import pandas as pd

keywords = ['Virtual','Offset','loc','Import','Imports','var','Forwarder','UINT','LONG','BOOL','WORD','BYTES','large','short','dd','db','dw','XREF','ptr','DATA','FUNCTION','extrn','byte','word','dword','char','DWORD','stdcall','arg','locret','asc','align','WinMain','unk','cookie','off','nullsub','DllEntryPoint','System32','dll','CHUNK','BASS','HMENU','DLL','LPWSTR','void','HRESULT','HDC','LRESULT','HANDLE','HWND','LPSTR','int','HLOCAL','FARPROC','ATOM','HMODULE','WPARAM','HGLOBAL','entry','rva','COLLAPSED','config','exe','Software','CurrentVersion','__imp_','INT_PTR','UINT_PTR','---Seperator','PCCTL_CONTEXT','__IMPORT_','INTERNET_STATUS_CALLBACK','.rdata:','.data:','.text:','case','installdir','market','microsoft','policies','proc','scrollwindow','search','trap','visualc','___security_cookie','assume','callvirtualalloc','exportedentry','hardware','hkey_current_user','hkey_local_machine','sp-analysisfailed','unableto']
known_sections = ['.text', '.data', '.bss', '.rdata', '.edata', '.idata', '.rsrc', '.tls', '.reloc']
registers = ['edx','esi','es','fs','ds','ss','gs','cs','ah','al','ax','bh','bl','bx','ch','cl','cx','dh','dl','dx','eax','ebp','ebx','ecx','edi','esp']
opcodes = ['add','al','bt','call','cdq','cld','cli','cmc','cmp','const','cwd','daa','db'
                ,'dd','dec','dw','endp','ends','faddp','fchs','fdiv','fdivp','fdivr','fild'
                ,'fistp','fld','fstcw','fstcwimul','fstp','fword','fxch','imul','in','inc'
                ,'ins','int','jb','je','jg','jge','jl','jmp','jnb','jno','jnz','jo','jz'
                ,'lea','loope','mov','movzx','mul','near','neg','not','or','out','outs'
                ,'pop','popf','proc','push','pushf','rcl','rcr','rdtsc','rep','ret','retn'
                ,'rol','ror','sal','sar','sbb','scas','setb','setle','setnle','setnz'
                ,'setz','shl','shld','shr','sidt','stc','std','sti','stos','sub','test'
                ,'wait','xchg','xor','nop']

peFeatures1 = ['number_of_sections','number_of_IAT_entires', \
                   'number_of_import_symbols', 'number_of_imports', 'number_of_rva_and_sizes', \
                   'sec_entropy_data','sec_entropy_rdata', 'sec_entropy_reloc', 'sec_entropy_text', 'sec_entropy_rsrc',\
                   'sec_rawsize_data','sec_rawsize_text','size_code', 'SizeOfHeaders', \
                   'imported_symbols', 'imported_dll_freq','section_names','sha256',\
                   'datadir_IMAGE_DIRECTORY_ENTRY_BASERELOC_size', 'datadir_IMAGE_DIRECTORY_ENTRY_RESOURCE_size', \
                   'datadir_IMAGE_DIRECTORY_ENTRY_IAT_size', 'datadir_IMAGE_DIRECTORY_ENTRY_IMPORT_size']
peFeatures2 = ['machine','number_of_sections','compile_date','pointer_to_symbol_table','number_of_symbols','size_of_optional_header','characteristics'
,'magic','major_linker_version','minor_linker_version','size_init_data','size_uninit_data','section_alignment','file_alignment'
,'major_operating_system_version','minor_operating_system_version','major_image_version','minor_image_version','major_subsystem_version'
,'minor_subsystem_version','size_of_headers','subsystem','dll_characteristics','loader_flags','number_of_imports','AddressOfEntryPoint'
,'SizeOfHeaders','CheckSum','size_of_stack_reserve','size_of_stack_commit','size_of_heap_reserve','size_of_heap_commit'
,'image_base','Size_image','BaseOfCode','number_of_rva_and_sizes','number_of_IAT_entires']

def countCsv(directory):
    x=0
    for files in os.listdir(directory):
        if files.endswith('.csv'):
            x+=1
    return x

def createAsmCsv(asmOutput,apiFile,outputFolder):
    individualOutputCsv = outputFolder+"asmFeatures.csv"
    with open(individualOutputCsv, 'w') as f:
        # write the csv header
        fw = writer(f)
        fapi = open(apiFile)
        defined_apis = fapi.readlines()
        defined_apis = defined_apis[0].split(',')
        colnames = ['filename'] + keywords + registers + opcodes + defined_apis
        fapi.close()
        fw.writerow(colnames)
        f.close()
    commandToRun = "(cd "+asmOutput+" ; ls | grep .csv | xargs cat) >> "+outputFolder+"asmFeatures.csv"
    # commandToRun = "cat "+asmOutput+"*.csv >> " +outputFolder+"asmFeatures.csv"
    print(commandToRun)
    os.system(commandToRun)

def createHexCsv(hexOutput,outputFolder):
    individualOutputCsv = outputFolder+"hexFeatures.csv"
    with open(individualOutputCsv, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['filename'] + ['ent_whole_file']+ ['ent_mean'] + ['ent_var'] + ['ent_median'] + ['ent_max'] + ['ent_min'] + ['max_min']  + ['filesize']
        fw.writerow(colnames)
        f.close()
    commandToRun = "(cd "+hexOutput+" ; ls | grep .csv | xargs cat) >> "+outputFolder+"hexFeatures.csv"
    # commandToRun = "cat "+hexOutput+"*.csv >> " +outputFolder+"hexFeatures.csv"
    print(commandToRun)
    os.system(commandToRun)

def createPeCsv(peOutput, outputFolder):
    individualOutputCsv = outputFolder+"peFeatures.csv"
    with open(individualOutputCsv, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['filename'] + peFeatures1 + peFeatures2
        fw.writerow(colnames)
        f.close()
    commandToRun = "(cd "+peOutput+" ; ls | grep .csv | xargs cat) >> "+outputFolder+"peFeatures.csv"
    # commandToRun = "cat "+peOutput+"*.csv >> " +outputFolder+"peFeatures.csv"
    print(commandToRun)
    os.system(commandToRun)

def mergeStatic(outputDirectory):
    print("Merging static features...")
    # Merge asm, hex and Pe features
    asmCsv = outputDirectory+"asmFeatures.csv"
    hexCsv = outputDirectory+"hexFeatures.csv"
    peCsv = outputDirectory+ "peFeatures.csv"
    a = pd.read_csv(asmCsv)
    b = pd.read_csv(hexCsv)
    c = pd.read_csv(peCsv)
    mergedAsmHex = a.merge(b, on='filename')
    mergeAsmHexPe = mergedAsmHex.merge(c, on='filename')

    # Merge static features with labels
    labelsCsv = outputDirectory+"vtLabels.csv"
    labelsVt = pd.read_csv(labelsCsv)
    staticWithLabels = mergeAsmHexPe.merge(labelsVt,on='filename')
    outputCsv= outputDirectory+"staticWithLabels.csv"
    staticWithLabels.to_csv(outputCsv, index = False)

def mergeStaticNoLabels(outputDirectory):
    print("Merging static features...")
    # Merge asm, hex and Pe features
    asmCsv = outputDirectory+"asmFeatures.csv"
    hexCsv = outputDirectory+"hexFeatures.csv"
    peCsv = outputDirectory+ "peFeatures.csv"
    a = pd.read_csv(asmCsv)
    b = pd.read_csv(hexCsv)
    c = pd.read_csv(peCsv)
    mergedAsmHex = a.merge(b, on='filename')
    mergeAsmHexPe = mergedAsmHex.merge(c, on='filename')
    outputCsv= outputDirectory+"static.csv"
    mergeAsmHexPe.to_csv(outputCsv, index = False)

def mergeDynamic(outputDirectory):
    print("Merging static and dinamic features...")
    # Merge asm, hex and Pe features
    asmCsv = outputDirectory+"asmFeatures.csv"
    hexCsv = outputDirectory+"hexFeatures.csv"
    peCsv = outputDirectory+ "peFeatures.csv"
    a = pd.read_csv(asmCsv)
    b = pd.read_csv(hexCsv)
    c = pd.read_csv(peCsv)
    mergedAsmHex = a.merge(b, on='filename')
    mergeAsmHexPe = mergedAsmHex.merge(c, on='filename')
    
    # Merge static with dynamic features
    dynamicCsv = outputDirectory+"dynamicFeatures.csv"
    d = pd.read_csv(dynamicCsv)
    staticAndDynamic = mergeAsmHexPe.merge(d, on='filename')
    
    # Merge static features with labels
    labelsCsv = outputDirectory+"vtLabels.csv"
    labelsVt = pd.read_csv(labelsCsv)
    staticDynamicWithLabels = staticAndDynamic.merge(labelsVt,on='filename')
    outputCsv= outputDirectory+"staticDynamicWithLabels.csv"
    staticDynamicWithLabels.to_csv(outputCsv, index = False)

def createExpCsv(totalExperiments,expOutput,outputFolder,headerType=1):
    individualOutputCsv = outputFolder+"exp_0_"+str(totalExperiments)+".csv"
    with open(individualOutputCsv, 'w') as f:
        # write the csv header
        fw = writer(f)
        if headerType==1:
            colnames = ['NumberOfFeatures'] + ['NBAccuray'] + ['NBMacro'] + ['NBWeighted'] + ['NBError']  + ['RfAccuray'] + ['RfMacro'] + ['RfWeighted'] + ['RfError'] + ['XgAccuray'] + ['XgMacro'] + ['XgWeighted'] + ['XgError']
        if headerType==2:
            colnames = ['Exp'] + ['NBAc'] + ['NBFP'] + ['NBFN'] + ['RFAc'] + ['RFFP'] + ['RFFN'] + ['XGAc'] + ['XGFP'] + ['XGFN'] + ['VotAc'] + ['VotFP'] + ['VotFN']
        if headerType==3:
            colnames = ['Exp'] + ['NBAc'] + ['NBFP'] + ['NBFN'] + ['NBSenAc'] + ['NBSenFP'] + ['NBSenFN'] + ['RFAc'] + ['RFFP'] + ['RFFN'] + ['XGAc'] + ['XGFP'] + ['XGFN'] + ['VotAc'] + ['VotFP'] + ['VotFN']
        if headerType ==4:
           colnames = ['Exp'] +['ut1_1'] + ['ut1_2'] + ['ut2_1'] + ['ut2_2'] + ['NBSenAc'] +['NBeu']+ ['NBSenFPR'] + ['NBSenFNR'] + ['RFSenAc']+['RFeu'] + ['RFSenFPR'] + ['RFSenFNR'] + ['XGSenAc'] +['XGeu'] +['XGSenFPR'] + ['XGSenFNR']
        fw.writerow(colnames)
        f.close()
    commandToRun = "cat "+expOutput+"*.csv >> "+individualOutputCsv
    print(commandToRun)
    os.system(commandToRun)


        
