import os as os
import sys
import os.path
from csv import writer
import random
import multiprocessing
import time
import shutil
from mpi4py import MPI


keywords = ['Virtual','Offset','loc','Import','Imports','var','Forwarder','UINT','LONG','BOOL','WORD','BYTES','large','short','dd','db','dw','XREF','ptr','DATA','FUNCTION','extrn','byte','word','dword','char','DWORD','stdcall','arg','locret','asc','align','WinMain','unk','cookie','off','nullsub','DllEntryPoint','System32','dll','CHUNK','BASS','HMENU','DLL','LPWSTR','void','HRESULT','HDC','LRESULT','HANDLE','HWND','LPSTR','int','HLOCAL','FARPROC','ATOM','HMODULE','WPARAM','HGLOBAL','entry','rva','COLLAPSED','config','exe','Software','CurrentVersion','__imp_','INT_PTR','UINT_PTR','---Seperator','PCCTL_CONTEXT','__IMPORT_','INTERNET_STATUS_CALLBACK','.rdata:','.data:','.text:','case','installdir','market','microsoft','policies','proc','scrollwindow','search','trap','visualc','___security_cookie','assume','callvirtualalloc','exportedentry','hardware','hkey_current_user','hkey_local_machine','sp-analysisfailed','unableto']
known_sections = ['.text', '.data', '.bss', '.rdata', '.edata', '.idata', '.rsrc', '.tls', '.reloc']
registers = ['edx','esi','es','fs','ds','ss','gs','cs','ah','al','ax','bh','bl','bx','ch','cl','cx','dh','dl','dx','eax','ebp','ebx','ecx','edi','esp']
opcodes = ['add','al','bt','call','cdq','cld','cli','cmc','cmp','const','cwd','daa','db'
                ,'dd','dec','dw','endp','ends','faddp','fchs','fdiv','fdivp','fdivr','fild'
                ,'fistp','fld','fstcw','fstcwimul','fstp','fword','fxch','imul','in','inc'
                ,'ins','int','jb','je','jg','jge','jl','jmp','jnb','jno','jnz','jo','jz'
                ,'lea','loope','mov','movzx','mul','near','neg','not','or','out','outs'
                ,'pop','popf','proc','push','pushf','rcl','rcr','rdtsc','rep','ret','retn'
                ,'rol','ror','sal','sar','sbb','scas','setb','setle','setnle','setnz'
                ,'setz','shl','shld','shr','sidt','stc','std','sti','stos','sub','test'
                ,'wait','xchg','xor','nop']

    
def count_asm_symbols(asm_code):
    symbols = [0]*7
    for row in asm_code:
        if '*' in row:
            symbols[0] += 1
        if '-' in row:
            symbols[1] += 1
        if '+' in row:
            symbols[2] += 1
        if '[' in row:
            symbols[3] += 1
        if ']' in row:
            symbols[4] += 1
        if '@' in row:
            symbols[5] += 1
        if '?' in row:
            symbols[6] += 1
    return symbols

def count_asm_registers(asm_code):
    registers_values = [0]*len(registers)
    for row in asm_code:
        parts = row.replace(',',' ').replace('+',' ').replace('*',' ').replace('[',' ').replace(']',' ') \
                    .replace('-',' ').split()
        for register in registers:
            registers_values[registers.index(register)] += parts.count(register)
    return registers_values

def count_asm_opcodes(asm_code):
    opcodes_values = [0]*len(opcodes)
    for row in asm_code:
        parts = row.split()

        for opcode in opcodes:
            if opcode in parts:
                opcodes_values[opcodes.index(opcode)] += 1
                break
    return opcodes_values

def count_asm_APIs(asm_code, apis):
    apis_values = [0]*len(apis)
    for row in asm_code:
        for i in range(len(apis)):
            if apis[i] in row:
                apis_values[i] += 1
                break
    return apis_values

def count_asm_misc(asm_code):
    keywords_values = [0]*len(keywords)
    for row in asm_code:
        for i in range(len(keywords)):
            if keywords[i] in row:
                keywords_values[i] += 1
                break
    return keywords_values

def getFeatures(fname,asmFolder,apiFile):
    feature_counts = []
    fasm = open(asmFolder + fname, 'r', errors='ignore')
    content = fasm.readlines()
            
    #file_entropy = getFileEntropy(ext_drive + fname)
    mis_vals = count_asm_misc(content)
    #sec_vals = count_asm_sections(content)
    reg_vals = count_asm_registers(content)
    opc_vals = count_asm_opcodes(content)

    fapi = open(apiFile)
    defined_apis = fapi.readlines()
    defined_apis = defined_apis[0].split(',')
    api_vals = count_asm_APIs(content, defined_apis)
    fapi.close()
    
    # count_vals = file_entropy + reg_vals + opc_vals + api_vals + mis_vals
    count_vals = mis_vals + reg_vals + opc_vals + api_vals            
    feature_counts.append([fname[:fname.find('.asm')]] + count_vals)   
    fasm.close()  
    return feature_counts



def extractAsmFeatures():

    comm = MPI.COMM_WORLD
    rank = int(comm.Get_rank())
    nprocs = comm.Get_size()

    sumToRank = int(sys.argv[1])
    asmFolder = sys.argv[2]
    apiFile = sys.argv[3]
    asmOutput = sys.argv[4]
    
    rank+=sumToRank
    print("Rank: ", rank)
    # Get .asm file
    listOfAsmFiles = os.listdir(asmFolder)
    asmFile = str(listOfAsmFiles[rank])
    print("AsmFile: ",asmFile)
    # Extract features from .asm file
    feature_counts = getFeatures(asmFile,asmFolder,apiFile)
    # Write features to .csv file
    individualOutputCsv = asmOutput+asmFile+".csv"
    with open(individualOutputCsv, 'w') as f:
        fw = writer(f)
        fw.writerows(feature_counts)
        f.close()
    
extractAsmFeatures()

