import pefile
from pefile import PEFormatError
import os
import shutil

PE_feature_list = ['number_of_sections','number_of_IAT_entires', \
                   'number_of_import_symbols', 'number_of_imports', 'number_of_rva_and_sizes', \
                   'sec_entropy_data','sec_entropy_rdata', 'sec_entropy_reloc', 'sec_entropy_text', 'sec_entropy_rsrc',\
                   'sec_rawsize_data','sec_rawsize_text','size_code', 'SizeOfHeaders', \
                   'imported_symbols', 'imported_dll_freq','section_names','sha256',\
                   'datadir_IMAGE_DIRECTORY_ENTRY_BASERELOC_size', 'datadir_IMAGE_DIRECTORY_ENTRY_RESOURCE_size', \
                   'datadir_IMAGE_DIRECTORY_ENTRY_IAT_size', 'datadir_IMAGE_DIRECTORY_ENTRY_IMPORT_size']

peFeatures1 = ['imported_dll_freq','number_of_rva_and_sizes','number_of_IAT_entires','size_code','SizeOfHeaders']
peFeatures2 = ['machine','number_of_sections','compile_date','pointer_to_symbol_table','number_of_symbols','size_of_optional_header','characteristics'
,'magic','major_linker_version','minor_linker_version','size_init_data','size_uninit_data','section_alignment','file_alignment'
,'major_operating_system_version','minor_operating_system_version','major_image_version','minor_image_version','major_subsystem_version'
,'minor_subsystem_version','size_of_headers','subsystem','dll_characteristics','loader_flags','number_of_imports','AddressOfEntryPoint'
,'SizeOfHeaders','CheckSum','size_of_stack_reserve','size_of_stack_commit','size_of_heap_reserve','size_of_heap_commit'
,'image_base','Size_image','BaseOfCode','number_of_rva_and_sizes','number_of_IAT_entires']

def open_using_pefile(input_name, filesDestination):

    extracted_features = {}
    
    try:
        print("input_name: ", input_name)
        pe = pefile.PE(input_name)

        print("13")
        extracted_features['number_of_rva_and_sizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
        print("14")
        extracted_features['number_of_IAT_entires'] = (pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].Size)/4
        print("15")
        extracted_features['size_code'] = pe.OPTIONAL_HEADER.SizeOfCode
        print("16")
        extracted_features['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        print("17")
        extracted_features['minor_image_version'] = pe.OPTIONAL_HEADER.MinorImageVersion
        print("18")
        extracted_features['major_subsystem_version'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        print("19")
        extracted_features['minor_subsystem_version'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        print("20")
        extracted_features['size_of_headers'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        print("21")
        extracted_features['subsystem'] = pe.OPTIONAL_HEADER.Subsystem
        print("22")
        extracted_features['dll_characteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
        print("23")
        extracted_features['loader_flags'] = pe.OPTIONAL_HEADER.LoaderFlags
        print("24")
        extracted_features['number_of_imports'] = len(pe.DIRECTORY_ENTRY_IMPORT)
        print("25")
        extracted_features['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        print("26")
        extracted_features['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        print("27")
        extracted_features['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        print("28")
        extracted_features['size_of_stack_reserve'] = float(pe.OPTIONAL_HEADER.SizeOfStackReserve)
        print("29")
        extracted_features['size_of_stack_commit'] = float(pe.OPTIONAL_HEADER.SizeOfStackCommit)
        print("30")
        extracted_features['size_of_heap_reserve'] = float(pe.OPTIONAL_HEADER.SizeOfHeapReserve)
        print("31")
        extracted_features['size_of_heap_commit'] = float(pe.OPTIONAL_HEADER.SizeOfHeapCommit)
        print("32")
        extracted_features['image_base'] = float(pe.OPTIONAL_HEADER.ImageBase)
        print("33")
        extracted_features['Size_image'] = pe.OPTIONAL_HEADER.SizeOfImage
        print("34")
        extracted_features['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        print("35")
        extracted_features['number_of_rva_and_sizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
        print("36")
        extracted_features['number_of_IAT_entires'] = (pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].Size)/4
        print("37")

        
    except (PEFormatError,AttributeError, IndexError) as e:
        print("File: ", input_name," PE error")
        print("Copying: ", input_name, "to: ", filesDestination)
        shutil.copy(input_name,filesDestination)
        print("Deleting file: ", input_name)
        os.remove(input_name)
        
def removeFilesWithoutPeHeader(virus_dir, filesDestination):
    print("Files without pe header: ")
    # check pe in folder
    files = [os.path.join(virus_dir,fi) for fi in os.listdir(virus_dir)]
    countTemp = 0
    for fil in files:
        pe = open_using_pefile(fil,filesDestination)
        countTemp += 1
        print("Check file: ", countTemp)

def removeFilesNo32bits(malwareDirectory):
    commandToRun = "file "+malwareDirectory+"* | grep -v \"32-bit\" | cut -d \':\' -f 1 | xargs rm"
    os.system(commandToRun)
