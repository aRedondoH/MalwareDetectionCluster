#!/usr/bin/env python

import os, os.path
import sys
import numpy as np
import pandas as pd
from pathlib import Path
from classifiers import *
import shutil
from mpi4py import MPI

def expCrossBenignMalware():

    comm = MPI.COMM_WORLD
    rank = int(comm.Get_rank())
    nprocs = comm.Get_size()
    sumToRank = int(sys.argv[1])
    expOutput = sys.argv[2]
    outputDirectory = sys.argv[3]
    csvBenign = sys.argv[4]
    csvMalware = sys.argv[5]

    rank+=sumToRank
    print("Rank: ", rank)
    benignDf = pd.read_csv(outputDirectory+csvBenign, index_col=0)
    malwareDf = pd.read_csv(outputDirectory+csvMalware, index_col=0)
    print("shapeB: ", benignDf.shape, " shapeM: ",malwareDf.shape)
    # Remove possible unnamed columns
    benignDf.drop(benignDf.columns[benignDf.columns.str.contains('unnamed',case = False)],axis = 1)
    malwareDf.drop(malwareDf.columns[malwareDf.columns.str.contains('unnamed',case = False)],axis = 1)

    cutDf = np.random.rand(len(malwareDf)) < (61800/len(malwareDf))/100 # Around 618 (similar number of bening files)
    print("cutDf: ", cutDf)
    malwareCutDf = malwareDf[cutDf]
    print("shape malwareCutDf: ", malwareCutDf.shape)
    dataDf = benignDf.append(malwareCutDf, ignore_index=True) # carefull if both do not have the same shape
    print("dataDFshape: ", dataDf.shape)
    
    dataDf = dataDf.drop(dataDf.columns[dataDf.columns.str.contains('unnamed',case = False)],axis = 1)
    X_data, y_data= dataDf.iloc[:,1:-1],dataDf.iloc[:,-1]
    results = classifyCombClassifiersSen(X_data,y_data,rank) # Utility sensitive analysis
    resultsRounded = [ round(elem, 3) for elem in results ] # Round float to 7 decimals
    
    # Write features to .csv file
    individualOutputCsv = expOutput+"exp_"+str(rank)+".csv"
    with open(individualOutputCsv, 'a') as f:
        fw = writer(f)
        fw.writerow(resultsRounded)
        f.close()

def expNumberOfFeaturesPerformance():
    comm = MPI.COMM_WORLD
    rank = int(comm.Get_rank())
    nprocs = comm.Get_size()

    sumToRank = int(sys.argv[1])
    expOutput = sys.argv[2]
    outputDirectory = sys.argv[3]
    csvBenign = sys.argv[4]
    csvMalware = sys.argv[5]

    rank+=sumToRank
    print("Rank: ", rank)

    benignDf = pd.read_csv(outputDirectory+csvBenign, index_col=0)
    malwareDf = pd.read_csv(outputDirectory+csvMalware, index_col=0)
    print("shapeB: ", benignDf.shape, " shapeM: ",malwareDf.shape)

    # Remove possible unnamed columns
    benignDf = benignDf.drop(benignDf.columns[benignDf.columns.str.contains('unnamed',case = False)],axis = 1)
    malwareDf = malwareDf.drop(malwareDf.columns[malwareDf.columns.str.contains('unnamed',case = False)],axis = 1)

    cutDf = np.random.rand(len(malwareDf)) < (61800/len(malwareDf))/100 # Around 618 (similar number of bening files)
    print("cutDf: ", cutDf)
    malwareCutDf = malwareDf[cutDf]
    print("shape malwareCutDf: ", malwareCutDf.shape)
    dataDf = benignDf.append(malwareCutDf, ignore_index=True) # carefull if both do not have the same shape
    print("dataDFshape: ", dataDf.shape)
    X_data, y_data= dataDf.iloc[:,1:-1],dataDf.iloc[:,-1]
    print("X_data shape:", X_data.shape)
    # All columns
    indexis = X_data.columns
    
    if rank>2:
        indexis = indexis[0:rank]
        X_data = X_data[indexis]
    
        X_data = dataStandarization(X_data)
        results = classifyCrossFeatureSelection(X_data,y_data,rank)
        # Write features to .csv file
        individualOutputCsv = expOutput+"exp_"+str(rank)+".csv"
        with open(individualOutputCsv, 'a') as f:
            fw = writer(f)
            fw.writerow(results)
            f.close()

def expAllFeaturesPerformance():
    comm = MPI.COMM_WORLD
    rank = int(comm.Get_rank())
    nprocs = comm.Get_size()

    sumToRank = int(sys.argv[1])
    expOutput = sys.argv[2]
    outputDirectory = sys.argv[3]
    csvBenign = sys.argv[4]
    csvMalware = sys.argv[5]

    rank+=sumToRank
    print("Rank: ", rank)
    benignDf = pd.read_csv(outputDirectory+csvBenign, index_col=0)
    malwareDf = pd.read_csv(outputDirectory+csvMalware, index_col=0)
    print("shapeB: ", benignDf.shape, " shapeM: ",malwareDf.shape)
    print("bening columns: ", benignDf.columns)
    print("malware columns: ", malwareDf.columns)

    # Remove possible unnamed columns
    benignDf = benignDf.drop(benignDf.columns[benignDf.columns.str.contains('unnamed',case = False)],axis = 1)
    malwareDf = malwareDf.drop(malwareDf.columns[malwareDf.columns.str.contains('unnamed',case = False)],axis = 1)
    cutDf = np.random.rand(len(malwareDf)) < (61800/len(malwareDf))/100 # Around 618 (similar number of bening files)
    print("cutDf: ", cutDf)
    malwareCutDf = malwareDf[cutDf]
    print("shape malwareCutDf: ", malwareCutDf.shape)
    dataDf = benignDf.append(malwareCutDf, ignore_index=True) # carefull if both do not have the same shape
    print("dataDf columns: ", dataDf.columns)
    print("dataDFshape: ", dataDf.shape)
    X_data, y_data= dataDf.iloc[:,1:-1],dataDf.iloc[:,-1]
    print("X_data shape:", X_data.shape)
    print("X_data columns: ", X_data.columns)
    X_data = dataStandarization(X_data)
    results = classifyCrossFeatureSelection(X_data,y_data,rank)
    # Write features to .csv file
    individualOutputCsv = expOutput+"exp_"+str(rank)+".csv"
    with open(individualOutputCsv, 'a') as f:
        fw = writer(f)
        fw.writerow(results)
        f.close()
    
expCrossBenignMalware()
# expAllFeaturesPerformance()
# expNumberOfFeaturesPerformance()
