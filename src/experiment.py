#!/usr/bin/env python
import os, os.path
from pathlib import Path
import time
from fullProcessAlberto import *


def experiment1Input(expOutput,outputDirectory,csvExp,numberOfExperiments):
    
    defaultCores=16
    cores = defaultCores
    if numberOfExperiments<cores:
        loopCuts=1
        cores=numberOfExperiments
    else:
        loopCuts = int(math.ceil(numberOfExperiments/cores))
    
    countLoopProcessed = 0
    sumToRank = 0
    for i in range(loopCuts):
        print("Loop: ", countLoopProcessed)
        if numberOfExperiments<cores:
            cores=numberOfExperiments
        if i>0:
            sumToRank+=defaultCores
            
        fout = str(expOutput)+str(i)+".txt"
        params = [str(cores),str(sumToRank),expOutput,outputDirectory,csvExp,fout]
        args = ['qsub','exp.sub'] + params
        output = subprocess.Popen(args,stdout=subprocess.PIPE).stdout.read()
        print("Output: ",output)
        countLoopProcessed+=1
        numberOfExperiments-=defaultCores


def experiment2Inputs(expOutput,outputDirectory,csv1,csv2,numberOfExperiments):
    
    defaultCores=16
    cores = defaultCores
    if numberOfExperiments<cores:
        loopCuts=1
        cores=numberOfExperiments
    else:
        loopCuts = int(math.ceil(numberOfExperiments/cores))
    
    countLoopProcessed = 0
    sumToRank = 0
    for i in range(loopCuts):
        print("Loop: ", countLoopProcessed)
        if numberOfExperiments<cores:
            cores=numberOfExperiments
        if i>0:
            sumToRank+=defaultCores
            
        fout = str(expOutput)+str(i)+".txt"
        params = [str(cores),str(sumToRank),expOutput,outputDirectory,csv1,csv2,fout]
        args = ['qsub','exp2.sub'] + params
        output = subprocess.Popen(args,stdout=subprocess.PIPE).stdout.read()
        print("Output: ",output)
        countLoopProcessed+=1
        numberOfExperiments-=defaultCores


def exp2Auto():

    totalExperiments=42
    csvExp = "exp.csv"
    malwareFolder="Testing/"
    
    # Setup configuration folders
    virusTotalFolder,datasetDirectory,apiFile,malwareFolder,malwareDirectory,outputDirectory, asmOutput,hexOutput,peOutput,expOutput,tempFolder,asmFolder,hexFolder,filesWithoutPeHeader = setupConfigurationFolders(malwareFolder)

    # 0. Create art. labels
    #preprocessingData(datasetDirectory)
    #createArtLables(datasetDirectory, outputDirectory)

    # 1. Clean temp and output folders
    print("Fase 1")
    cleanTempFolders(tempFolder)
    cleanOutputFolders(outputDirectory)
    onGoing = dict.fromkeys(["a3", "a4", "a5","a6","a7"], 0)
    while checkIfFileExists(outputDirectory,csvExp)==0:    
        if countFiles(asmFolder)==0 and countFiles(hexFolder)==0 and onGoing['a3']==0:
            onGoing['a3']=1
            print("Fase 3")
            # 3. Convert files to asm and hex format
            convertFiles(malwareDirectory,asmFolder,hexFolder)
        if countFiles(asmFolder)==countFiles(malwareDirectory) and countFiles(hexFolder)==countFiles(malwareDirectory) and onGoing['a4']==0:
            onGoing['a4']=1
            print("Fase 4")
            # 4. Get Asm, hex and pe features  
            getStaticFeatures(malwareDirectory,apiFile,asmFolder,hexFolder,asmOutput,hexOutput,peOutput)
        if countCsv(asmOutput)==countFiles(malwareDirectory) and countCsv(hexOutput)==countFiles(malwareDirectory) and countCsv(peOutput)==countFiles(malwareDirectory) and onGoing['a5']==0:
            onGoing['a5']=1
            print("Fase 5")
            # 5. concatenate indivifual .csv to create asm.csv, hex.csv, pe.csv
            createCsvStatic(outputDirectory,apiFile,asmOutput,hexOutput,peOutput)
            # Merge asm, hex, pe to create static.csv
            mergeStaticNoLabels(outputDirectory)
        if checkIfFileExists(outputDirectory,"static.csv")==1 and onGoing['a6']==0:
            onGoing['a6']=1
            print("Fase 6")
            # 6. Run experiments
            experiment1Input(expOutput,outputDirectory,csvExp,totalExperiments)
        if countCsv(expOutput)==totalExperiments and onGoing['a7']==0:
            onGoing['a7']=1
            print("Fase 7")
            # 7. concatenate all experiments
            createCsvExperiments(totalExperiments,expOutput,outputDirectory)
        # Delay
        time.sleep(1)

def expClassificationFromFeatures():
    print("-- Exp classification from features --")

    totalExperiments=42
    csvExp = "exp.csv"
    
    # Setup configuration folders
    virusTotalFolder,datasetDirectory,apiFile,malwareFolder,malwareDirectory,outputDirectory, asmOutput,hexOutput,peOutput,expOutput,tempFolder,asmFolder,hexFolder,filesWithoutPeHeader = setupConfigurationFolders()

    # 1. Clean temp and output folders
    print("-- Phase 1 --")
    cleanOutputFolders(outputDirectory)
    onGoing = dict.fromkeys(["a2", "a3"], 0)
    while checkIfFileExists(outputDirectory,csvExp)==0:
        if checkIfFileExists(outputDirectory,"static.csv")==1 and onGoing['a2']==0:
            onGoing['a2']=1
            print("-- Phase 2 --")
            # 6. Run experiments
            experiment1Input(expOutput,outputDirectory,csvExp,totalExperiments)
        if countCsv(expOutput)==totalExperiments and onGoing['a3']==0:
            onGoing['a3']=1
            print("-- Phase 3 --")
            # 7. concatenate all experiments
            createCsvExperiments(totalExperiments,expOutput,outputDirectory)
        # Delay
        time.sleep(1)
    print("Classification from features Done!")




def expClasCombiningBenignMalwareFeatures():
    print("-- Exp combining benign and malware features --")

    totalExperiments=20
    benignCsv = "staDynBenignLab.csv"
    # malwareCsv = "staDynVxHeaven518Lab.csv"
    # malwareCsv = "staDynVt3000Lab.csv"
    malwareCsv = "staDynVxHeaven3000Lab.csv"
    
    # Setup configuration folders
    virusTotalFolder,datasetDirectory,apiFile,malwareFolder,malwareDirectory,outputDirectory, asmOutput,hexOutput,peOutput,expOutput,tempFolder,asmFolder,hexFolder,filesWithoutPeHeader = setupConfigurationFolders()

    # 1. Clean temp and output folders
    # print("-- Phase 1 --")

    # createArtLabelsFromCsv(outputDirectory+benignCsv,0) # in case that dataset is not labelled
    # createArtLabelsFromCsv(outputDirectory+malwareCsv,1)

    # cleanOutputFolders(outputDirectory)
    
    # 6. Run experiments
    # print("-- Phase 2 --")
    # experiment2Inputs(expOutput,outputDirectory,benignCsv,malwareCsv,totalExperiments)

    # while True:
    #     # print("Process running: ", getProcessRunning())
    #     # Delay
    #     time.sleep(1)
    #     if getProcessRunning() == 0:
    #        # 7. concatenate all experiments
    #        print("-- Phase 3 --")

    headerType=4 # For classification with voting no-cross including NB sen
    createCsvExperiments(totalExperiments,expOutput,outputDirectory,headerType)

    #        break
        
    print("Classification combining benign and malware features Done!")

    
def expExtractFeaturesAuto():
    print("-- Exp extract features --")

    # malwareFolder="VtObfuscated2017/"
    # malwareFolder = "Testing2/"
    # malwareFolder = "VxHeavenMalwareClean/"
    # malwareFolder = "Vt2018_3000Obfuscated/"
    # malwareFolder = "MetameFiles/"
    # malwareFolder = "RealBenign/"
    # malwareFolder = "Vt2019/"
    # malwareFolder = "MalwareObfuscated2Times/"
    # malwareFolder = "MalwareObfuscated3Times/"
    # malwareFolder = "MalwareObfuscated4Times/"
    malwareFolder = "MalwareObfuscated5Times/"
    
    # Setup configuration folders
    virusTotalFolder,datasetDirectory,apiFile,malwareFolder,malwareDirectory,outputDirectory, asmOutput,hexOutput,peOutput,expOutput,tempFolder,asmFolder,hexFolder,filesWithoutPeHeader = setupConfigurationFolders(malwareFolder)

    # 0. Create art. labels
    # preprocessingData(malwareDirectory)

    # 1. Clean temp and output folders
    # print("-- Phase 1 --") 
    # cleanTempFolders(tempFolder)  # Carefull with these two to run specific parth
    # cleanOutputFolders(outputDirectory)
    
    # onGoing = dict.fromkeys(["a2", "a3", "a4"], 0)
    # while checkIfFileExists(outputDirectory,"static.csv")==0:    

    #     if countFiles(asmFolder)==0 and countFiles(hexFolder)==0 and onGoing['a2']==0:
    #         onGoing['a2']=1
    #         print("-- Phase 2 --")
    #         # 2. Convert files to asm and hex format
    #         convertFiles(malwareDirectory,asmFolder,hexFolder)
            
    #     if countFiles(asmFolder)==countFiles(malwareDirectory) and countFiles(hexFolder)==countFiles(malwareDirectory) and onGoing['a3']==0:
    #         onGoing['a3']=1
    #         print("-- Phase 3 --")
    #         # 3. Get Asm, hex and pe features  
    #         getStaticFeatures(malwareDirectory,apiFile,asmFolder,hexFolder,asmOutput,hexOutput,peOutput)

        # if countCsv(asmOutput)==countFiles(malwareDirectory) and countCsv(hexOutput)==countFiles(malwareDirectory) and countCsv(peOutput)==countFiles(malwareDirectory) and onGoing['a4']==0:

    # onGoing['a4']=1
    # print("-- Phase 4 --")
    # 5. concatenate indivifual .csv to create asm.csv, hex.csv, pe.csv
    createCsvStatic(outputDirectory,apiFile,asmOutput,hexOutput,peOutput)
    # Merge asm, hex, pe to create static.csv
    mergeStaticNoLabels(outputDirectory)
    # Delay
    # time.sleep(1)
    print("Exp extract features Done!")
 
expExtractFeaturesAuto()
# expClasCombiningBenignMalwareFeatures() 
