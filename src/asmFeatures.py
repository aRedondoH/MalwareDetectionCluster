#!/usr/bin/env python
import os as os
import os.path
from csv import writer
from joblib import Parallel, delayed
import multiprocessing
import sys
import grp
import subprocess
from itertools import product
import numpy as np
import pandas as pd
import math

# Convert binaries to .asm
def convertBinaryFilesToAsm(virus_dir,output_asm_dir):
    print("Converting files from ",virus_dir,"to .asm format...")
    params = [str(virus_dir),str(output_asm_dir)]
    args = ['qsub','objdump.sub'] + params
    print("Command: ", args)
    output = subprocess.Popen(args,stdout=subprocess.PIPE).stdout.read()
    print("Output: ",output)
    
# Extract asm features
def getAsmFeatures(apiFile,asmFolder,asmOutput):
    print("Getting asm features...")
    
    tfiles = os.listdir(asmFolder)
    asm_files = [i for i in tfiles if '.asm' in i]
    numberOfAsmFiles = len(asm_files)
    print("Number of asm files: ",numberOfAsmFiles)

    defaultCores=16
    cores = defaultCores
    if numberOfAsmFiles<cores:
        loopCuts=1
        cores=numberOfAsmFiles
    else:
        loopCuts = int(math.ceil(numberOfAsmFiles/cores))

    countLoopProcessed = 0
    sumToRank=0
    for i in range(loopCuts):
        print("Loop: ", countLoopProcessed)
        if numberOfAsmFiles<cores:
            cores=numberOfAsmFiles
        if i>0:
            sumToRank+=defaultCores
            
        fout = str(asmOutput)+str(i)+".txt"
        params = [str(cores),str(sumToRank),asmFolder,apiFile,asmOutput,fout]
        args = ['qsub','asm.sub'] + params
        output = subprocess.Popen(args,stdout=subprocess.PIPE).stdout.read()
        print("Output: ",output)
        countLoopProcessed+=1
        numberOfAsmFiles-=defaultCores







    

