#!/usr/bin/env python
import os, os.path
from pathlib import Path
import time
from fullProcessAlberto import *

def experiment2Inputs(expOutput,outputDirectory,csv1,csv2,numberOfExperiments):

    defaultCores=16
    cores = defaultCores
    if numberOfExperiments<cores:
        loopCuts=1
        cores=numberOfExperiments
    else:
        loopCuts = int(math.ceil(numberOfExperiments/cores))
    countLoopProcessed = 0
    sumToRank = 0
    for i in range(loopCuts):
        print("Loop: ", countLoopProcessed)
        if numberOfExperiments<cores:
            cores=numberOfExperiments
        if i>0:
            sumToRank+=defaultCores

        fout = str(expOutput)+str(i)+".txt"
        params = [str(cores),str(sumToRank),expOutput,outputDirectory,csv1,csv2,fout]
        args = ['qsub','exp2.sub'] + params
        output = subprocess.Popen(args,stdout=subprocess.PIPE).stdout.read()
        print("Output: ",output)
        countLoopProcessed+=1
        numberOfExperiments-=defaultCores

def expClasCombiningBenignMalwareFeatures():
    print("-- Exp combining benign and malware features --")

    totalExperiments=20
    benignCsv = "staDynBenignLab.csv" # benign binaries features 
    malwareCsv = "staDynVxHeaven3000Lab.csv" # malware binaries features
    
    # Setup configuration folders
    virusTotalFolder,datasetDirectory,apiFile,malwareFolder,malwareDirectory,outputDirectory, asmOutput,hexOutput,peOutput,expOutput,tempFolder,asmFolder,hexFolder,filesWithoutPeHeader = setupConfigurationFolders()

    # Clean temp and output folders
    print("-- Phase 1 --")
    cleanOutputFolders(outputDirectory)
    
    # Run experiments
    print("-- Phase 2 --")
    experiment2Inputs(expOutput,outputDirectory,benignCsv,malwareCsv,totalExperiments)

    # Concatenate all experiments (this is runned after done the experiments)
    print("-- Phase 3 --")
    headerType=4 # For classification with voting no-cross including NB sen
    createCsvExperiments(totalExperiments,expOutput,outputDirectory,headerType)
    print("Classification Done!")

    
def expExtractFeaturesAuto():
    print("-- Exp extract features --")
    
    malwareFolder = "MalwareFolder/" # Malware folder to run the experiments (dont forget / at the end)
    
    # Setup configuration folders
    virusTotalFolder,datasetDirectory,apiFile,malwareFolder,malwareDirectory,outputDirectory, asmOutput,hexOutput,peOutput,expOutput,tempFolder,asmFolder,hexFolder,filesWithoutPeHeader = setupConfigurationFolders(malwareFolder)

    # 0. Create art. labels
    # preprocessingData(malwareDirectory) # This phase not always is needed

    # 1. Clean temp and output folders
    # print("-- Phase 1 --") 
    cleanTempFolders(tempFolder)  # Carefull with these two to run specific parth
    cleanOutputFolders(outputDirectory)
    
    onGoing = dict.fromkeys(["a2", "a3", "a4"], 0)
    while checkIfFileExists(outputDirectory,"static.csv")==0:    
        if countFiles(asmFolder)==0 and countFiles(hexFolder)==0 and onGoing['a2']==0:
            onGoing['a2']=1
            print("-- Phase 2 --")
            # 2. Convert files to asm and hex format
            convertFiles(malwareDirectory,asmFolder,hexFolder)
            
        if countFiles(asmFolder)==countFiles(malwareDirectory) and countFiles(hexFolder)==countFiles(malwareDirectory) and onGoing['a3']==0:
            onGoing['a3']=1
            print("-- Phase 3 --")
            # 3. Get Asm, hex and pe features  
            getStaticFeatures(malwareDirectory,apiFile,asmFolder,hexFolder,asmOutput,hexOutput,peOutput)


    print("-- Phase 4 --") # This phase is runned when phase 2 and phase 3 are completed
    # 5. concatenate indivifual .csv to create asm.csv, hex.csv, pe.csv
    # createCsvStatic(outputDirectory,apiFile,asmOutput,hexOutput,peOutput)
    # Merge asm, hex, pe to create static.csv
    # mergeStaticNoLabels(outputDirectory)
    # Delay
    # time.sleep(1)
    # print("Exp extract features Done!")
 
expExtractFeaturesAuto()
# expClasCombiningBenignMalwareFeatures() 
